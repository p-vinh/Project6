Initialize:
Opens the input file (Prog.asm),
and gets ready to process it
Constructs a symbol table,
and adds to it all the predefined symbols



First pass:
Reads the program lines, one by one,
focusing only on (label) declarations.
Adds the found labels to the symbol table


Second pass (main loop)
(starts again from the beginning of the file)
While there are more lines to process:
Gets the next instruction, and parses it
If the instruction is @ symbol
If symbol is not in the symbol table, adds it to the table
Translates the symbol to its binary value
If the instruction is dest =comp ; jump
Translates each of the three fields into its binary value
Assembles the binary values described above into a string of sixteen 0’s and 1’s
Writes the string to the output file.